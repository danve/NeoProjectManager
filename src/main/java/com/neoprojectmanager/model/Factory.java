package com.neoprojectmanager.model;

import static org.apache.commons.lang.StringUtils.isBlank;

import java.util.Iterator;

import org.apache.commons.lang.NotImplementedException;
import org.neo4j.graphdb.Direction;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Node;
import org.neo4j.graphdb.Relationship;
import org.neo4j.graphdb.RelationshipType;
import org.neo4j.graphdb.ReturnableEvaluator;
import org.neo4j.graphdb.StopEvaluator;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.Traverser.Order;
import org.neo4j.kernel.EmbeddedGraphDatabase;

/**
 * The factory is used to generate all the first-level domain model objects.
 * Projects, for example, as a project can exist indipendently from other
 * objects. A Task should be generated by a Project instead, as a Task should
 * alsais belogn to a project. It evnelops the db instance we are actually
 * working on. And allow to manage in one location only the inizialization of
 * those objects.
 * 
 * @author xan
 * 
 */
public class Factory {
	enum RELATIONSHIP implements RelationshipType {
		PROJECTS, RESOURCES, PROJECT, RESOURCE
	}

	private GraphDatabaseService gdbs = null;
	private String dbFolder = null;
	private Node projectRefNode;
	private Node resourceRefNode;

	/*
	 * TODO Can this be a static function?
	 */
	private void initDB(GraphDatabaseService gdbs) {
		Node r = gdbs.getReferenceNode();
		projectRefNode = getRefNode(gdbs, RELATIONSHIP.PROJECTS);
		resourceRefNode = getRefNode(gdbs, RELATIONSHIP.RESOURCES);
	}

	private Node getRefNode(GraphDatabaseService gdbs, RelationshipType rel) {
		Relationship refRelat = gdbs.getReferenceNode().getSingleRelationship(
				rel, Direction.OUTGOING);
		if (refRelat == null) {
			Node refNode = gdbs.createNode();
			gdbs.getReferenceNode().createRelationshipTo(refNode, rel);
			return refNode;
		} else
			return refRelat.getEndNode();
	}

	public Factory(String dbFolder) {
		this.dbFolder = dbFolder;
		if (gdbs == null)
			this.gdbs = new EmbeddedGraphDatabase(this.dbFolder);
		Transaction tx = gdbs.beginTx();
		try {
			initDB(gdbs);
			tx.success();
		} finally {
			tx.finish();
		}
	}

	public Iterator<Project> getAllProjects() {
		return new Iterator<Project>() {
			private final Iterator<Node> iterator = projectRefNode.traverse(
					Order.BREADTH_FIRST, StopEvaluator.DEPTH_ONE,
					ReturnableEvaluator.ALL_BUT_START_NODE,
					RELATIONSHIP.PROJECT, Direction.OUTGOING).iterator();

			public boolean hasNext() {
				return iterator.hasNext();
			}

			public Project next() {
				Node nextNode = iterator.next();
				return new Project(nextNode, gdbs);
			}

			public void remove() {
				throw new NotImplementedException(
						"This method is not implemented.");
			}
		};
	}

	/**
	 * shutdown the database.
	 */
	public void close() {
		this.gdbs.shutdown();
		this.gdbs = null;
		this.resourceRefNode = null;
		this.projectRefNode = null;
	}

	public Project createProject(String name) {
		if (isBlank(name))
			throw new IllegalArgumentException("Name can not be blank");
		Transaction tx = this.gdbs.beginTx();
		try {
			Project n = new Project(name, this.gdbs);
			projectRefNode.createRelationshipTo(n.node, RELATIONSHIP.PROJECT);
			tx.success();
			return n;
		} finally {
			tx.finish();
		}
	}

	public Resource createResource(String name) {
		if (isBlank(name))
			throw new IllegalArgumentException("Name can not be blank");
		Transaction tx = this.gdbs.beginTx();
		try {
			Resource r = new Resource(name, this.gdbs);
			resourceRefNode.createRelationshipTo(r.node, RELATIONSHIP.RESOURCE);
			tx.success();
			return r;
		} finally {
			tx.finish();
		}
	}

	public Project getProjectById(long id) {
		Transaction tx = this.gdbs.beginTx();
		try {
			Project p = new Project(this.gdbs.getNodeById(id), this.gdbs);
			tx.success();
			return p;
		} finally {
			tx.finish();
		}
	}

	public void clearDB() {
		Transaction tx = gdbs.beginTx();
		try {
			for (Node n : gdbs.getAllNodes()) {
				for (Relationship r : n.getRelationships()) {
					r.delete();
				}
				if (n.getId() != 0)
					n.delete();
			}
			projectRefNode = null;
			resourceRefNode = null;
			initDB(gdbs);
			tx.success();
		} finally {
			tx.finish();
		}
	}

	public Transaction beginTx() {
		return gdbs.beginTx();
	}

	public void populateDB() {
		Transaction tx = gdbs.beginTx();
		try {
			// create Projects
			// create subprojects

			// add Task
			// set Task dependencies
			// set properties
			// create resources
			// assign resources

			Project project1 = createProject("Project 1");
			Task task1 = project1.createTask("TaskImpl 1");
			Task task2 = project1.createTask("TaskImpl 2");
			task1.setDurationInMinutes(60 * 24 * 10);
			task2.setDurationInMinutes(60 * 24 * 6);
			task2.addDependentOn(task1);
			tx.success();
		} finally {
			tx.finish();
		}
	}

	public String getDbFolder() {
		return dbFolder;
	}
}
